# yaml-language-server: $schema=https://raw.githubusercontent.com/compose-spec/compose-spec/master/schema/compose-spec.json
name: 'heapsnas-n8n'

x-shared: &shared
  restart: always
  image: docker.n8n.io/n8nio/n8n
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_PORT=5432
    - DB_POSTGRESDB_DATABASE_FILE=/run/secrets/postgres_db
    - DB_POSTGRESDB_USER_FILE=/run/secrets/postgres_user
    - DB_POSTGRESDB_PASSWORD_FILE=/run/secrets/postgres_password
    - EXECUTIONS_MODE=queue
    - QUEUE_BULL_REDIS_HOST=redis
    - QUEUE_HEALTH_CHECK_ACTIVE=true
    - N8N_ENCRYPTION_KEY_FILE=/run/secrets/n8n_encryption_key
  links:
    - postgres
    - redis
  volumes:
    - n8n_storage:/home/node/.n8n
    - secrets_volume:/run/secrets:ro
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
    secrets-init:
      condition: service_completed_successfully

services:
  # Init container to fetch secrets from 1Password
  secrets-init:
    image: 1password/op:2
    environment:
      # OP_SERVICE_ACCOUNT_TOKEN should be set in Portainer as stack environment variable
      - OP_SERVICE_ACCOUNT_TOKEN=${OP_SERVICE_ACCOUNT_TOKEN}
    volumes:
      - ./scripts/fetch-secrets.sh:/fetch-secrets.sh:ro
      - secrets_volume:/var/run/secrets
    command: ['/bin/bash', '/fetch-secrets.sh']

  postgres:
    image: postgres:17
    restart: always
    environment:
      - POSTGRES_USER_FILE=/run/secrets/postgres_root_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_root_password
      - POSTGRES_DB_FILE=/run/secrets/postgres_db
    volumes:
      - db_storage:/var/lib/postgresql/data
      - ./scripts/init-postgres.sh:/docker-entrypoint-initdb.d/init-postgres.sh:ro
      - secrets_volume:/run/secrets:ro
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U postgres -d n8n']
      interval: 5s
      timeout: 5s
      retries: 10
    depends_on:
      secrets-init:
        condition: service_completed_successfully

  redis:
    image: redis:8-alpine
    restart: always
    volumes:
      - redis_storage:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 5s
      retries: 10

  n8n:
    <<: *shared
    ports:
      - '${N8N_PORT:-5678}:5678'

  n8n-worker:
    <<: *shared
    command: worker
    depends_on:
      - n8n

volumes:
  db_storage:
    driver: local
  n8n_storage:
    driver: local
  redis_storage:
    driver: local
  secrets_volume:
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=10m,mode=0755
# No secrets section needed since we're using a shared volume approach

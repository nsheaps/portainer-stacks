# yaml-language-server: $schema=https://raw.githubusercontent.com/compose-spec/compose-spec/master/schema/compose-spec.json
name: "nextcloud"

# Set in env on portainer:
# - OP_SERVICE_ACCOUNT_TOKEN for secrets fetching

services:

  x-shared: &shared
    image: nextcloud:apache
    restart: unless-stopped
    environment: # more info: https://hub.docker.com/_/nextcloud/#auto-configuration-via-environment-variables
      - POSTGRES_HOST=postgresql
      - POSTGRES_DB_FILE=/run/secrets/postgres_db
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - REDIS_HOST=redis
    volumes:
      - nextcloud-secrets:/run/secrets:ro
      - /share/Docker/nextcloud:/var/www/html:z

  init-secrets:
    image: 1password/op:2
    user: "0:0" # Run as root for putting in the secrets dir
    environment:
      # OP_SERVICE_ACCOUNT_TOKEN should be set in Portainer as stack environment variable
      - OP_SERVICE_ACCOUNT_TOKEN=${OP_SERVICE_ACCOUNT_TOKEN}
    volumes:
      - nextcloud-secrets:/run/secrets:rw
    command:
      - /bin/bash
      - -c
      - |
        set -euo pipefail
        {
          function fetch() {
              local ref="$$1"
              local dest="$$2"
              op read --no-newline "$$ref" > "$$dest"
              echo " got '$$ref' => '$$dest'"
          }
          echo "Fetching all secrets in parallel..."

          fetch "op://heapsinfra/portainer--heapsnas--postgres--root-user/username" "/run/secrets/postgres_root_user" &
          fetch "op://heapsinfra/portainer--heapsnas--postgres--root-user/password" "/run/secrets/postgres_root_password" &
          fetch "op://heapsinfra/portainer--heapsnas--nextcloud/db_name" "/run/secrets/postgres_db" &
          fetch "op://heapsinfra/portainer--heapsnas--nextcloud/db_username" "/run/secrets/postgres_user" &
          fetch "op://heapsinfra/portainer--heapsnas--nextcloud/db_password" "/run/secrets/postgres_password" &

          wait
          chmod 444 /run/secrets/*
        } || {
          echo "Failed to fetch secrets, waiting 5 minutes before exiting"
          sleep 300
          exit 1
        }

  init-database:
    image: postgres:18
    user: "0:0"
    volumes:
      - nextcloud-secrets:/run/secrets:ro
    networks:
      - postgresql
    command:
      - /bin/bash
      - -c
      - |
        set -euo pipefail
        {
          # Load credentials
          DB_NAME=$(cat /run/secrets/postgres_db)
          DB_USER=$(cat /run/secrets/postgres_user)
          DB_PASSWORD=$(cat /run/secrets/postgres_password)
          ROOT_USER=$(cat /run/secrets/postgres_root_user)
          export PGPASSWORD=$(cat /run/secrets/postgres_root_password)

          # Create database and user if they don't exist, then grant permissions
          psql -h postgresql -U "$$ROOT_USER" -d postgres << EOF
          DO \$\$
          BEGIN
            -- Create database if not exists
            IF NOT EXISTS (SELECT FROM pg_database WHERE datname = '$$DB_NAME') THEN
              CREATE DATABASE "$$DB_NAME";
              RAISE NOTICE 'Created database: $$DB_NAME';
            ELSE
              RAISE NOTICE 'Database $$DB_NAME already exists';
            END IF;

            -- Create user if not exists
            IF NOT EXISTS (SELECT FROM pg_user WHERE usename = '$$DB_USER') THEN
              EXECUTE format('CREATE USER "$$DB_USER" WITH PASSWORD ''%s''', '$$DB_PASSWORD');
              RAISE NOTICE 'Created user: $$DB_USER';
            ELSE
              RAISE NOTICE 'User $$DB_USER already exists';
            END IF;

            -- Grant permissions
            GRANT ALL PRIVILEGES ON DATABASE "$$DB_NAME" TO "$$DB_USER";
            GRANT ALL PRIVILEGES ON SCHEMA public TO "$$DB_USER";
          END
          \$\$;
          EOF

          echo "Database initialization completed!"
        } || {
          echo "Database initialization failed, waiting 5 minutes before exiting"
          sleep 300
          exit 1
        }
    depends_on:
      postgresql:
        condition: service_healthy

  nextcloud:
    <<: *shared
    networks:
      - cloudflared
      - postgresql
      - redis
    ports:
      - 8080:80
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  cron:
    <<: *shared
    entrypoint: /cron.sh
    networks:
      - postgresql
      - redis

volumes:
  nextcloud-secrets:
    driver: local

networks:
  cloudflared:
    external: true
  postgresql:
    external: true
  redis:
    external: true

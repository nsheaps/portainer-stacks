# yaml-language-server: $schema=https://raw.githubusercontent.com/compose-spec/compose-spec/master/schema/compose-spec.json
name: "nextcloud"

# Set in env on portainer:
# - OP_SERVICE_ACCOUNT_TOKEN for secrets fetching
x-shared: &shared
  image: nextcloud:apache
  restart: unless-stopped
  environment: # more info: https://hub.docker.com/_/nextcloud/#auto-configuration-via-environment-variables
    - POSTGRES_HOST=postgresql
    - POSTGRES_DB_FILE=/run/secrets/postgres_db
    - POSTGRES_USER_FILE=/run/secrets/postgres_user
    - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
    - REDIS_HOST=redis
  volumes:
    - nextcloud-secrets:/run/secrets:ro
    - /share/Docker/nextcloud:/var/www/html:z

services:


  init-secrets:
    image: 1password/op:2
    user: "0:0" # Run as root for putting in the secrets dir
    environment:
      # OP_SERVICE_ACCOUNT_TOKEN should be set in Portainer as stack environment variable
      - OP_SERVICE_ACCOUNT_TOKEN=${OP_SERVICE_ACCOUNT_TOKEN}
    volumes:
      - nextcloud-secrets:/run/secrets:rw
    command:
      - /bin/bash
      - -c
      - |
        set -euo pipefail
        {
          function fetch() {
              local ref="$$1"
              local dest="$$2"
              op read --no-newline "$$ref" > "$$dest"
              echo " got '$$ref' => '$$dest'"
          }
          echo "Fetching all secrets in parallel..."

          fetch "op://heapsinfra/portainer--heapsnas--postgres--root-user/username" "/run/secrets/postgres_root_user" &
          fetch "op://heapsinfra/portainer--heapsnas--postgres--root-user/password" "/run/secrets/postgres_root_password" &
          fetch "op://heapsinfra/portainer--heapsnas--nextcloud/db_name" "/run/secrets/postgres_db" &
          fetch "op://heapsinfra/portainer--heapsnas--nextcloud/db_username" "/run/secrets/postgres_user" &
          fetch "op://heapsinfra/portainer--heapsnas--nextcloud/db_password" "/run/secrets/postgres_password" &

          wait
          chmod 444 /run/secrets/*
        } || {
          echo "Failed to fetch secrets, waiting 5 minutes before exiting"
          sleep 300
          exit 1
        }

  init-database:
    image: postgres:18
    user: "0:0"
    volumes:
      - nextcloud-secrets:/run/secrets:ro
    depends_on:
      init-secrets:
        condition: service_completed_successfully
    networks:
      - postgresql
    command:
      - /bin/bash
      - -c
      - |
        set -euo pipefail
        {
          # Load credentials
          DB_NAME=$(cat /run/secrets/postgres_db)
          DB_USER=$(cat /run/secrets/postgres_user)
          DB_PASSWORD=$(cat /run/secrets/postgres_password)
          export PGUSER=$(cat /run/secrets/postgres_root_user)
          export PGPASSWORD=$(cat /run/secrets/postgres_root_password)

          DB_EXISTS=$(psql -h postgresql -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='${DB_NAME}'")
          USER_EXISTS=$(psql -h postgresql -d postgres -tAc "SELECT 1 FROM pg_user WHERE usename='${DB_USER}'")

          if [ "$$DB_EXISTS" != "1" ]; then
            echo "Creating database '$$DB_NAME'..."
            psql -h postgresql -d postgres -c "CREATE DATABASE \"$$DB_NAME\";"
          else
            echo "Database '$$DB_NAME' already exists, skipping creation."
          fi

          if [ "$$USER_EXISTS" != "1" ]; then
            echo "Creating user '$$DB_USER'..."
            psql -h postgresql -d postgres -c "CREATE USER \"$$DB_USER\" WITH PASSWORD '$$DB_PASSWORD';"
          else
            echo "User '$$DB_USER' already exists, skipping creation."
          fi
          # Grant permissions
          psql -h postgresql -d postgres -c "GRANT ALL PRIVILEGES ON DATABASE \"$$DB_NAME\" TO \"$$DB_USER\";"
          psql -h postgresql -d "$$DB_NAME" -c "GRANT ALL PRIVILEGES ON SCHEMA public TO \"$$DB_USER\";"
          psql -h postgresql -d postgres -c "ALTER DATABASE \"$$DB_NAME\" OWNER TO \"$$DB_USER\";"

          echo "Database initialization completed!"
        } || {
          echo "Database initialization failed, waiting 5 minutes before exiting"
          sleep 300
          exit 1
        }

  nextcloud:
    <<: *shared
    networks:
      - cloudflared
      - postgresql
      - redis
    ports:
      - 15432:80
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  cron:
    <<: *shared
    entrypoint: /cron.sh
    networks:
      - postgresql
      - redis

volumes:
  nextcloud-secrets:
    driver: local

networks:
  cloudflared:
    external: true
  postgresql:
    external: true
  redis:
    external: true
